<div id="ytPlayerWrapper">
    <div id="ytPlayer"></div>
</div>

<div class="wrapper">
    <div class="row">
        <form class="form-inline">
            <a id="changeSectionButton" class="btn btn-light">other Section</a>
            <a id="playButton" class="btn btn-light">Play / Pause</a>
            <a id="nextButton" class="btn btn-light">Next Song</a>
        </form>
    </div>
    <div class="row songInfo">
        <div>
            <span id="songTitle" class="songTitle"></span> <span>  -  </span><span id="songSinger" class="songSinger"></span>
        </div>
    </div>
    <div>
        <table class="table scoreTable">
            <tbody id="team">
            <!-- <tr>
                <td><button id="teamButton" class="btn btn-default">Team 1 <br/> <span id="teamButtonScore">0 </span> </button></td>
                <td><button id="teamButton" class="btn btn-default">Team 2 <br/> <span id="teamButtonScore">0 </span> </button></td>
            </tr>
            <tr>
                <td><button id="teamButton" class="btn btn-default">Team 3 <br/> <span id="teamButtonScore">0 </span> </button></td>
                <td><button id="teamButton" class="btn btn-default">Team 4 <br/> <span id="teamButtonScore">0 </span> </button></td>
            </tr> -->
            </tbody>
        </table>
    </div>
</div>





<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="/script/jquery-youtube.js"></script>
<script src="/script/jquery-csv.min.js"></script>
<script>

    //global variable
    var player = $('#ytPlayer')
    var playlistName = "ado";
    var playlistData;

    // when webpage ready, init
    $(document).ready(function() {

        //get url param
        const searchParams = new URLSearchParams(window.location.search);
        var playlistId = searchParams.get('playlistId');
        var customPlaylistId = searchParams.get('customPlaylistId');

        var teamSize = searchParams.get('teamSize');

        if (playlistId) {
            console.log("using selected playlist")
            // Read Data File
            $.ajax({
                type: "GET",
                url: "../../guessSongAsset/" + playlistId + ".csv",
                dataType: "text",
                success: function(data) {
                    processDataFile(data);
                }
            });
        } else if (customPlaylistId) {
            console.log("using custom playlist")
            // customPlaylistId = "RDCLAK5uy_mfU0cXtK1L_pNWL5z0hyE9N_4MnFjX03c" //for test debug only
            apiKey = "AIzaSyD-2MmJytmZA0h-JuTaja2Y48S-8zUhF3s"

            $.ajax({
                type: "GET",
                url: formatYTUrl(customPlaylistId),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function(data) {
                    processYTGetPlaylistItems(data);
                },
                error: function(e) {
                    console.log(e)
                }
            });
        }

        // set button onclick function
        $('#changeSectionButton').on('click', onChangeSectionButton)
        $('#nextButton').on('click', onNextButton)
        $('#playButton').on('click', onPlayButton)

        // set team block
        var totalRows = Math.ceil(teamSize / 2)
        var numberOfTeamlastRow = teamSize - (Math.floor((teamSize- 1) / 2)) * 2

        var teamCounter = 1
        for(i=1; i<=totalRows; i++) {
            var row="<tr>"
            for(j=0; j<=1 ; j++) {
                // console.log("totalRows: " + totalRows)
                // console.log("numberOfTeamlastRow: " + numberOfTeamlastRow)
                // console.log(i != totalRows || j != numberOfTeamlastRow)

                if(i != totalRows || j != numberOfTeamlastRow) {
                    row += "<td><button id='teamButton"+ + teamCounter + "' class='btn btn-secondary teamButton' val=" + teamCounter + ">Team " + teamCounter +" <br/> <span id='teamScore"+ teamCounter +"'>0 </span> </button></td>"
                }
                teamCounter++
            }
            row = row + "</tr>"
            // console.log("row:" + row)
            $("#team").append(row)
        }
        // register on click event
        $('.teamButton').on('click', onTeamButton)
    })


    // caller function
    // initialize youtube player
    function initializeYoutubePlayer() {

        //library: https://github.com/Luxiyalu/jquery-youtube

        shuffleArray(playlistData)

        var thisSong = playlistData[0]
        console.log("hi")
        console.log(thisSong)

        // update display table
        $("#songTitle").text(thisSong.title)
        $("#songSinger").text(thisSong.singer)

        player.YTplayer({
            // Basic setting
            width: "100%",                // video width
            // height: 560,                // video height
            videoId: thisSong.videoId,     // youtube video id

            // Events
            onReady: function() { console.log("on ready") ; autoPlay() },      // on video ready
            onStart: function(){},      // on video start
            onPause: function(){},      // on video pause
            onEnd: function(){},        // on video end
            onBuffer: function(){ console.log("on buffer") ;},     // on video buffer
            onStateChange: function(){}, // will be triggered by all the 5 events above

            playerVars: {
                autohide: 2,            // Values: 2 (default), 1, and 0. This parameter indicates whether the video controls will automatically hide after a video begins playing
                autoplay: 1,            // Values: 0 or 1. Default is 0. Sets whether or not the initial video will autoplay when the player loads.
                cc_load_policy: 0,      // Values: 1. Default is based on user preference. Setting to 1 will cause closed captions to be shown by default, even if the user has turned captions off.
                color: 'red',           // Valid parameter values are red and white, and, by default, the player will use the color red in the video progress bar.
                controls: 0,            // Values: 0 (do not display), 1, or 2. Default is 1. This parameter indicates whether the video player controls will display
                disablekb: 1,           // Values: 0 or 1. Default is 0. Setting to 1 will disable the player keyboard controls
                fs: 0,                  // Values: 0 or 1. The default value is 1, which causes the fullscreen button to display. Setting this parameter to 0 prevents the fullscreen button from displaying
                hl: 'en',               // Sets the player's interface language
                iv_load_policy: 3,      // Values: 1 or 3. Default is 1. Setting to 1 will cause video annotations to be shown by default, whereas setting to 3 will cause video annotations to not be shown by default
                playsinline: 0,         // This parameter controls whether videos play inline or fullscreen in an HTML5 player on iOS
                rel: 0,                 // Values: 0 or 1. Default is 1. This parameter indicates whether the player should show related videos when playback of the initial video ends
                showinfo: 0,            // Values: 0 or 1. The parameter's default value is 1. If you set the parameter value to 0, then the player will not display information like the video title and uploader before the video starts playing
                theme: 'dark'           // This parameter indicates whether the embedded player will display player controls (like a play button or volume control) within a dark or light control bar. Valid parameter values are dark and light
            }
        });
    }

    //play song
    function autoPlay() {

        // get a random start time in secs
        var songLength = player.getDuration()
        console.log("songLength: " + songLength)
        var randomStartTime = Math.floor(Math.random() * (songLength - 30)); // get a random start time, the start time should be at least 30 seconds than the song duration, since each part will be played for 30 secs
        console.log("randomStartTime: " + randomStartTime)

        // auto play the video
        player.seekTo(randomStartTime)
    }

    function onChangeSectionButton() {

        player.pause()

        var songLength = player.getDuration()
        var currentTime = player.getCurrentTime()

        while(true) {
            var randomStartTime = Math.floor(Math.random() * (songLength - 30)); // get a random start time, the start time should be at least 30 seconds than the song duration, since each part will be played for 30 secs
            console.log("randomStartTime: " + randomStartTime)
            if(randomStartTime > currentTime - 60 || randomStartTime < currentTime + 15) {
                player.seekTo(randomStartTime)
                player.play()
                break;
            }
        }
    }

    function onPlayButton() {
        console.log("Play Button is clicked")
        console.log("getPlayerState(): " + player.getPlayerState() )
        // song is not playing
        if(player.getPlayerState() != 1) {
            player.play()
        } else if (player.getPlayerState() == 1) {
            player.pause()
        }
    }

    function onNextButton() {
        console.log("Next Button is clicked")
        //remove current song from playlist
        playlistData.shift()

        //close the current player
        player.clear()

        var playerBlock = "<div id='ytPlayer'></div>"
        $("#ytPlayer").remove()
        $("#ytPlayerWrapper").append(playerBlock)

        initializeYoutubePlayer()
    }

    function onTeamButton() {
        console.log("Next Button is clicked")
        var clickedTeamId = $(this).attr('val')
        var clickedTeam = $("#teamScore" + clickedTeamId)
        var currentValue = Number(clickedTeam.text())
        clickedTeam.text(++currentValue)
    }

    // convert csv to object of array
    function processDataFile(raw) {
        "use strict";
        var input = $.csv.toObjects(raw);
        playlistData = input

        console.log("playlistData",input)

        initializeYoutubePlayer()
    }

    function processYTGetPlaylistItems(res) {
        console.log("on processed YT API");
        console.log("res",res);

        // Convert res JSON to object format
        const input = res.items.map(item => {
            return {
                videoId: item.snippet.resourceId.videoId,
                title: item.snippet.title,
                singer: ""
            };
        });
        console.log("playlistData",input);
        playlistData = input
        initializeYoutubePlayer();
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    function formatYTUrl(playlistId) {
        baseUrl = "https://youtube.googleapis.com/youtube/v3/playlistItems"
        params = [
            {key: "playlistId", value: playlistId},
            {key: "key", value: "AIzaSyD-2MmJytmZA0h-JuTaja2Y48S-8zUhF3s"},
            {key: "part", value: "contentDetails"},
            {key: "part", value: "snippet"},
            {key: "maxResults", value: 100}
        ]
        finalUrl = baseUrl + "?"
        params.forEach(element => {
            finalUrl += element.key + "=" + element.value + "&"
        })

        console.log(finalUrl)

        return finalUrl
    }
</script>